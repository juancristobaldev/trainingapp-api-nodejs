generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model users {
  id            Int         @id @unique @default(autoincrement())
  first_name    String      @db.VarChar(50)
  last_name     String      @db.VarChar(50)
  email         String      @unique @db.VarChar(255)
  date          String?     @db.VarChar(20)
  password      String      @db.VarChar(255)
  token         String      @unique @db.VarChar(255)
  last_workouts String?     @db.Text
  profile       profile?
  exercises     exercises[]
  routines      routines[]
  folders       folders[]
  plans         plans[]
}

model profile {
  id     Int     @id @unique @default(autoincrement())
  user   users?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int     @unique
  photo  String? @db.VarChar(255)
}

model exercises {
  id       Int        @id @unique @default(autoincrement())
  name     String     @db.VarChar(50)
  type     String     @db.VarChar(50)
  muscle   String     @db.VarChar(50)
  series   String     @db.Text
  userId   Int
  user     users?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  routines routines[]
}

model routines {
  id         Int         @id @unique @default(autoincrement())
  name       String?     @db.VarChar(255)
  dones      Int
  timeRecord String      @db.VarChar(255)
  userId     Int
  user       users?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises  exercises[]
  ranges     ranges[]
  folders    folders[]
}

model folders {
  id       Int        @id @unique @default(autoincrement())
  name     String     @db.VarChar(50)
  userId   Int
  user     users?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  routines routines[]
}

model plans {
  id      Int    @id @unique @default(autoincrement())
  name    String @db.VarChar(30)
  autorId Int
  users   users? @relation(fields: [autorId], references: [id], onDelete: Cascade)
  days    days[]
}

model days {
  id         Int      @id @unique @default(autoincrement())
  identifier Int
  plans      plans?   @relation(fields: [plansId], references: [id], onDelete: Cascade)
  plansId    Int?
  ranges     ranges[]
}

model ranges {
  id        Int        @id @unique @default(autoincrement())
  dateStart String     @db.VarChar(30)
  dateEnd   String     @db.VarChar(30)
  days      days?      @relation(fields: [daysId], references: [id], onDelete: Cascade)
  daysId    Int?
  routines  routines[]
}
